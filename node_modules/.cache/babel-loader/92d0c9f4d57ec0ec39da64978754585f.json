{"ast":null,"code":"/*\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\t\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\n\r\nexport default accountSaga;\r\n*/\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\";\nimport clienteAxios from \"../../config/axios\";\nimport { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\nconst registerUser = async body => {\n  try {\n    const response = await clienteAxios.post(\"/api/registro\", body);\n  } catch (error) {}\n}; // Retorna el usuario autenticado\n\n\nconst usuarioAutenticado = async () => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    tokenAuth(token);\n  }\n\n  try {\n    const respuesta = await clienteAxios.get(\"/api/auth-user\");\n    dispatch({\n      type: OBTENER_USUARIO,\n      payload: respuesta.data.usuario\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_ERROR\n    });\n  }\n};\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/store/auth/register/saga.js"],"names":["REGISTER_USER","registerUserSuccessful","registerUserFailed","clienteAxios","takeEvery","fork","put","all","call","registerUser","body","response","post","error","usuarioAutenticado","token","localStorage","getItem","tokenAuth","respuesta","get","dispatch","type","OBTENER_USUARIO","payload","data","usuario","LOGIN_ERROR","watchUserRegister","accountSaga"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,sBAAR,EAAgCC,kBAAhC,QAAyD,WAAzD;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,QAA8C,oBAA9C;;AAEA,MAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACpC,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACS,IAAb,CAAkB,eAAlB,EAAmCF,IAAnC,CAAvB;AACA,GAFD,CAEE,OAAOG,KAAP,EAAc,CAAE;AAClB,CAJD,C,CAMA;;;AACA,MAAMC,kBAAkB,GAAG,YAAY;AACtC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AAEA,MAAIF,KAAJ,EAAW;AACVG,IAAAA,SAAS,CAACH,KAAD,CAAT;AACA;;AAED,MAAI;AACH,UAAMI,SAAS,GAAG,MAAMhB,YAAY,CAACiB,GAAb,CAAiB,gBAAjB,CAAxB;AACAC,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEC,eADE;AAERC,MAAAA,OAAO,EAAEL,SAAS,CAACM,IAAV,CAAeC;AAFhB,KAAD,CAAR;AAIA,GAND,CAME,OAAOb,KAAP,EAAc;AACfQ,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEK;AADE,KAAD,CAAR;AAGA;AACD,CAlBD;;AAoBA,OAAO,UAAUC,iBAAV,GAA8B;AACpC,QAAMxB,SAAS,CAACJ,aAAD,EAAgBS,YAAhB,CAAf;AACA;;AAED,UAAUoB,WAAV,GAAwB;AACvB,QAAMtB,GAAG,CAAC,CAACF,IAAI,CAACuB,iBAAD,CAAL,CAAD,CAAT;AACA;;AAED,eAAeC,WAAf","sourcesContent":["/*\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\t\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\n\r\nexport default accountSaga;\r\n*/\r\n\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\nimport clienteAxios from \"../../config/axios\";\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\nconst registerUser = async (body) => {\r\n\ttry {\r\n\t\tconst response = await clienteAxios.post(\"/api/registro\", body);\r\n\t} catch (error) {}\r\n};\r\n\r\n// Retorna el usuario autenticado\r\nconst usuarioAutenticado = async () => {\r\n\tconst token = localStorage.getItem(\"token\");\r\n\r\n\tif (token) {\r\n\t\ttokenAuth(token);\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst respuesta = await clienteAxios.get(\"/api/auth-user\");\r\n\t\tdispatch({\r\n\t\t\ttype: OBTENER_USUARIO,\r\n\t\t\tpayload: respuesta.data.usuario,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_ERROR,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n"]},"metadata":{},"sourceType":"module"}