{"ast":null,"code":"import axios from \"axios\"; // Gets the logged in user data from local session\n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem(\"authUser\");\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n    console.log(err);\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postLogin = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n}; // postForgetPwd\n\n\nconst postForgetPwd = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n};\n\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd };","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/helpers/fackBackend_Helper.js"],"names":["axios","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postRegister","url","data","post","then","response","status","catch","err","message","console","log","postLogin","postForgetPwd"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,MAAM;AAC7B,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAb;AACA,MAAIF,IAAJ,EAAU,OAAOG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACV,SAAO,IAAP;AACA,CAJD,C,CAMA;;;AACA,MAAMK,mBAAmB,GAAG,MAAM;AACjC,SAAON,eAAe,OAAO,IAA7B;AACA,CAFD,C,CAIA;;;AACA,MAAMO,YAAY,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnC,SAAOV,KAAK,CACVW,IADK,CACAF,GADA,EACKC,IADL,EAELE,IAFK,CAECC,QAAD,IAAc;AACnB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,IAAmB,GAAjD,EACC,OAAOD,QAAQ,CAACH,IAAhB;AACD,UAAMG,QAAQ,CAACH,IAAf;AACA,GANK,EAOLK,KAPK,CAOEC,GAAD,IAAS;AACf,QAAIC,OAAJ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAIA,GAAG,CAACH,QAAJ,IAAgBG,GAAG,CAACH,QAAJ,CAAaC,MAAjC,EAAyC;AACxC,cAAQE,GAAG,CAACH,QAAJ,CAAaC,MAArB;AACC,aAAK,GAAL;AACCG,UAAAA,OAAO,GAAG,wDAAV;AACA;;AACD,aAAK,GAAL;AACCA,UAAAA,OAAO,GACN,8DADD;AAEA;;AACD,aAAK,GAAL;AACCA,UAAAA,OAAO,GAAG,qBAAV;AACA;;AACD;AACCA,UAAAA,OAAO,GAAGD,GAAG,CAAC,CAAD,CAAb;AACA;AAbF;AAeA;;AACD,UAAMC,OAAN;AACA,GA5BK,CAAP;AA6BA,CA9BD,C,CAgCA;;;AACA,MAAMG,SAAS,GAAG,CAACX,GAAD,EAAMC,IAAN,KAAe;AAChC,SAAOV,KAAK,CACVW,IADK,CACAF,GADA,EACKC,IADL,EAELE,IAFK,CAECC,QAAD,IAAc;AACnB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EACC,MAAMD,QAAQ,CAACH,IAAf;AACD,WAAOG,QAAQ,CAACH,IAAhB;AACA,GANK,EAOLK,KAPK,CAOEC,GAAD,IAAS;AACf,UAAMA,GAAG,CAAC,CAAD,CAAT;AACA,GATK,CAAP;AAUA,CAXD,C,CAaA;;;AACA,MAAMK,aAAa,GAAG,CAACZ,GAAD,EAAMC,IAAN,KAAe;AACpC,SAAOV,KAAK,CACVW,IADK,CACAF,GADA,EACKC,IADL,EAELE,IAFK,CAECC,QAAD,IAAc;AACnB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EACC,MAAMD,QAAQ,CAACH,IAAf;AACD,WAAOG,QAAQ,CAACH,IAAhB;AACA,GANK,EAOLK,KAPK,CAOEC,GAAD,IAAS;AACf,UAAMA,GAAG,CAAC,CAAD,CAAT;AACA,GATK,CAAP;AAUA,CAXD;;AAaA,SACCf,eADD,EAECM,mBAFD,EAGCC,YAHD,EAICY,SAJD,EAKCC,aALD","sourcesContent":["import axios from \"axios\";\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n\tconst user = localStorage.getItem(\"authUser\");\r\n\tif (user) return JSON.parse(user);\r\n\treturn null;\r\n};\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n\treturn getLoggedInUser() !== null;\r\n};\r\n\r\n// Register Method\r\nconst postRegister = (url, data) => {\r\n\treturn axios\r\n\t\t.post(url, data)\r\n\t\t.then((response) => {\r\n\t\t\tif (response.status >= 200 || response.status <= 299)\r\n\t\t\t\treturn response.data;\r\n\t\t\tthrow response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tvar message;\r\n\t\t\tconsole.log(err);\r\n\t\t\tif (err.response && err.response.status) {\r\n\t\t\t\tswitch (err.response.status) {\r\n\t\t\t\t\tcase 404:\r\n\t\t\t\t\t\tmessage = \"Sorry! the page you are looking for could not be found\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 500:\r\n\t\t\t\t\t\tmessage =\r\n\t\t\t\t\t\t\t\"Sorry! something went wrong, please contact our support team\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 401:\r\n\t\t\t\t\t\tmessage = \"Invalid credentials\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tmessage = err[1];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow message;\r\n\t\t});\r\n};\r\n\r\n// Login Method\r\nconst postLogin = (url, data) => {\r\n\treturn axios\r\n\t\t.post(url, data)\r\n\t\t.then((response) => {\r\n\t\t\tif (response.status === 400 || response.status === 500)\r\n\t\t\t\tthrow response.data;\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tthrow err[1];\r\n\t\t});\r\n};\r\n\r\n// postForgetPwd\r\nconst postForgetPwd = (url, data) => {\r\n\treturn axios\r\n\t\t.post(url, data)\r\n\t\t.then((response) => {\r\n\t\t\tif (response.status === 400 || response.status === 500)\r\n\t\t\t\tthrow response.data;\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tthrow err[1];\r\n\t\t});\r\n};\r\n\r\nexport {\r\n\tgetLoggedInUser,\r\n\tisUserAuthenticated,\r\n\tpostRegister,\r\n\tpostLogin,\r\n\tpostForgetPwd,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}