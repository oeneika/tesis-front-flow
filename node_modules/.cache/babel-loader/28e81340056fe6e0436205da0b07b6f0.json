{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Login Redux States\n\nimport { CHECK_LOGIN, LOGOUT_USER } from \"./actionTypes\";\nimport { apiError, loginUserSuccessful, logoutUserSuccess } from \"./actions\"; // AUTH related methods\n\nimport { postLogin } from \"../../../helpers/fackBackend_Helper\";\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"; //Initilize firebase\n\nconst fireBaseBackend = getFirebaseBackend(); //If user is login then dispatch redux action's are directly from here.\n\nfunction* loginUser({\n  payload: {\n    user,\n    history\n  }\n}) {\n  try {\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser({\n  payload: {\n    history\n  }\n}) {\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(CHECK_LOGIN, loginUser);\n}\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* loginSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","CHECK_LOGIN","LOGOUT_USER","apiError","loginUserSuccessful","logoutUserSuccess","postLogin","getFirebaseBackend","fireBaseBackend","loginUser","payload","user","history","push","error","logoutUser","localStorage","removeItem","process","env","REACT_APP_DEFAULTAUTH","response","logout","watchUserLogin","watchUserLogout","loginSaga"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,QAA8C,oBAA9C,C,CAEA;;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,eAAvC;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,EAAuCC,iBAAvC,QAA+D,WAA/D,C,CAEA;;AACA,SAAQC,SAAR,QAAwB,qCAAxB;AACA,SAAQC,kBAAR,QAAiC,kCAAjC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,SAAV,CAAoB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP;AAAV,CAApB,EAAgD;AAC/C,MAAI;AACHA,IAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACA,GAFD,CAEE,OAAOC,KAAP,EAAc;AACf,UAAMhB,GAAG,CAACK,QAAQ,CAACW,KAAD,CAAT,CAAT;AACA;AACD;;AAED,UAAUC,UAAV,CAAqB;AAACL,EAAAA,OAAO,EAAE;AAACE,IAAAA;AAAD;AAAV,CAArB,EAA2C;AAC1C,MAAI;AACHI,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACrD,YAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACQ,eAAe,CAACc,MAAjB,CAA3B;AACA,YAAMxB,GAAG,CAACO,iBAAiB,CAACgB,QAAD,CAAlB,CAAT;AACA;;AAEDT,IAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACA,GATD,CASE,OAAOC,KAAP,EAAc;AACf,UAAMhB,GAAG,CAACK,QAAQ,CAACW,KAAD,CAAT,CAAT;AACA;AACD;;AAED,OAAO,UAAUS,cAAV,GAA2B;AACjC,QAAM3B,SAAS,CAACK,WAAD,EAAcQ,SAAd,CAAf;AACA;AAED,OAAO,UAAUe,eAAV,GAA4B;AAClC,QAAM5B,SAAS,CAACM,WAAD,EAAca,UAAd,CAAf;AACA;;AAED,UAAUU,SAAV,GAAsB;AACrB,QAAM1B,GAAG,CAAC,CAACF,IAAI,CAAC0B,cAAD,CAAL,EAAuB1B,IAAI,CAAC2B,eAAD,CAA3B,CAAD,CAAT;AACA;;AAED,eAAeC,SAAf","sourcesContent":["import {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport {CHECK_LOGIN, LOGOUT_USER} from \"./actionTypes\";\r\nimport {apiError, loginUserSuccessful, logoutUserSuccess} from \"./actions\";\r\n\r\n// AUTH related methods\r\nimport {postLogin} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* loginUser({payload: {user, history}}) {\r\n\ttry {\r\n\t\thistory.push(\"/dashboard\");\r\n\t} catch (error) {\r\n\t\tyield put(apiError(error));\r\n\t}\r\n}\r\n\r\nfunction* logoutUser({payload: {history}}) {\r\n\ttry {\r\n\t\tlocalStorage.removeItem(\"authUser\");\r\n\r\n\t\tif (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n\t\t\tconst response = yield call(fireBaseBackend.logout);\r\n\t\t\tyield put(logoutUserSuccess(response));\r\n\t\t}\r\n\r\n\t\thistory.push(\"/login\");\r\n\t} catch (error) {\r\n\t\tyield put(apiError(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserLogin() {\r\n\tyield takeEvery(CHECK_LOGIN, loginUser);\r\n}\r\n\r\nexport function* watchUserLogout() {\r\n\tyield takeEvery(LOGOUT_USER, logoutUser);\r\n}\r\n\r\nfunction* loginSaga() {\r\n\tyield all([fork(watchUserLogin), fork(watchUserLogout)]);\r\n}\r\n\r\nexport default loginSaga;\r\n"]},"metadata":{},"sourceType":"module"}