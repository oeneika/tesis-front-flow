{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Documents\\\\Tesis-front\\\\StarterKit\\\\src\\\\pages\\\\Camera\\\\index.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as faceapi from \"face-api.js\";\nimport WebCamPicture from \"./components/WebCamPicture.js\";\nconst MODEL_URL = \"/models\";\nconst minConfidence = 0.6;\nconst testImage = \"/img/bonnie.jpg\";\nexport class index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getFullFaceDescription = async canvas => {\n      console.log(canvas);\n      this.fullFaceDescriptions = await faceapi.allFaces(canvas, minConfidence);\n      console.log(this.fullFaceDescriptions);\n    };\n\n    this.drawDescription = canvas => {\n      this.fullFaceDescriptions.forEach((fd, i) => {\n        faceapi.drawLandmarks(canvas, fd.landmarks, {\n          drawLines: false\n        });\n      });\n    };\n\n    this.landmarkWebCamPicture = picture => {\n      const ctx = this.canvasPicWebCam.current.getContext(\"2d\");\n      var image = new Image();\n\n      image.onload = async () => {\n        ctx.drawImage(image, 0, 0);\n        await this.getFullFaceDescription(this.canvasPicWebCam.current);\n        this.drawDescription(this.canvasPicWebCam.current);\n      };\n\n      image.src = picture;\n    };\n\n    this.fullFaceDescriptions = null;\n    this.canvas = React.createRef();\n    this.canvasPicWebCam = React.createRef();\n  }\n\n  async componentDidMount() {\n    await this.loadModels();\n    const testImageHTML = document.getElementById(\"test\");\n    this.drawHTMLImage(this.canvas.current, testImageHTML, 296, 296);\n    await this.getFullFaceDescription(this.canvas.current);\n    this.drawDescription(this.canvas.current);\n  }\n\n  async loadModels() {\n    //await faceapi.loadModels(MODEL_URL)\n    await faceapi.loadFaceDetectionModel(MODEL_URL);\n    await faceapi.loadFaceLandmarkModel(MODEL_URL);\n    await faceapi.loadFaceRecognitionModel(MODEL_URL);\n  }\n\n  drawHTMLImage(canvas, image, width, height) {\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, 0, 0, width, height);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        marginTop: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"test\",\n      src: testImage,\n      alt: \"test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvas,\n      width: 296,\n      height: 296,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(WebCamPicture, {\n      landmarkPicture: this.landmarkWebCamPicture,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasPicWebCam,\n      width: 350,\n      height: 350,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/pages/Camera/index.js"],"names":["React","Component","faceapi","WebCamPicture","MODEL_URL","minConfidence","testImage","index","constructor","props","getFullFaceDescription","canvas","console","log","fullFaceDescriptions","allFaces","drawDescription","forEach","fd","i","drawLandmarks","landmarks","drawLines","landmarkWebCamPicture","picture","ctx","canvasPicWebCam","current","getContext","image","Image","onload","drawImage","src","createRef","componentDidMount","loadModels","testImageHTML","document","getElementById","drawHTMLImage","loadFaceDetectionModel","loadFaceLandmarkModel","loadFaceRecognitionModel","width","height","render","display","flexDirection","justifyContent","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport * as faceapi from \"face-api.js\";\r\nimport WebCamPicture from \"./components/WebCamPicture.js\";\r\n\r\nconst MODEL_URL = \"/models\";\r\nconst minConfidence = 0.6;\r\nconst testImage = \"/img/bonnie.jpg\";\r\n\r\nexport class index extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fullFaceDescriptions = null;\r\n\t\tthis.canvas = React.createRef();\r\n\t\tthis.canvasPicWebCam = React.createRef();\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tawait this.loadModels();\r\n\t\tconst testImageHTML = document.getElementById(\"test\");\r\n\t\tthis.drawHTMLImage(this.canvas.current, testImageHTML, 296, 296);\r\n\t\tawait this.getFullFaceDescription(this.canvas.current);\r\n\t\tthis.drawDescription(this.canvas.current);\r\n\t}\r\n\r\n\tasync loadModels() {\r\n\t\t//await faceapi.loadModels(MODEL_URL)\r\n\t\tawait faceapi.loadFaceDetectionModel(MODEL_URL);\r\n\t\tawait faceapi.loadFaceLandmarkModel(MODEL_URL);\r\n\t\tawait faceapi.loadFaceRecognitionModel(MODEL_URL);\r\n\t}\r\n\r\n\tgetFullFaceDescription = async (canvas) => {\r\n\t\tconsole.log(canvas);\r\n\t\tthis.fullFaceDescriptions = await faceapi.allFaces(canvas, minConfidence);\r\n\t\tconsole.log(this.fullFaceDescriptions);\r\n\t};\r\n\r\n\tdrawDescription = (canvas) => {\r\n\t\tthis.fullFaceDescriptions.forEach((fd, i) => {\r\n\t\t\tfaceapi.drawLandmarks(canvas, fd.landmarks, {drawLines: false});\r\n\t\t});\r\n\t};\r\n\r\n\tdrawHTMLImage(canvas, image, width, height) {\r\n\t\tconst ctx = canvas.getContext(\"2d\");\r\n\t\tctx.drawImage(image, 0, 0, width, height);\r\n\t}\r\n\r\n\tlandmarkWebCamPicture = (picture) => {\r\n\t\tconst ctx = this.canvasPicWebCam.current.getContext(\"2d\");\r\n\t\tvar image = new Image();\r\n\t\timage.onload = async () => {\r\n\t\t\tctx.drawImage(image, 0, 0);\r\n\t\t\tawait this.getFullFaceDescription(this.canvasPicWebCam.current);\r\n\t\t\tthis.drawDescription(this.canvasPicWebCam.current);\r\n\t\t};\r\n\t\timage.src = picture;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tflexDirection: \"row\",\r\n\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\tmarginTop: 100,\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<img id=\"test\" src={testImage} alt=\"test\" />\r\n\t\t\t\t\t<canvas ref={this.canvas} width={296} height={296} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<WebCamPicture landmarkPicture={this.landmarkWebCamPicture} />\r\n\t\t\t\t<canvas ref={this.canvasPicWebCam} width={350} height={350} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}