{"ast":null,"code":"/* import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from './actionTypes';\r\nimport { registerUserSuccessful, registerUserFailed } from './actions';\r\n\r\n//AUTH related methods\r\nimport { postRegister } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n    try {\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n            const response = yield call(postRegister, '/post-register', user);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n    } catch (error) {\r\n        yield put(registerUserFailed(error));\r\n    }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n    yield takeEvery(REGISTER_USER, registerUser)\r\n}\r\n\r\nfunction* accountSaga() {\r\n    yield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n*/\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\";\nimport clienteAxios from \"../../config/axios\";\nimport { takeEvery, fork, put, all } from \"redux-saga/effects\"; // Is user register successfull then direct plot user in redux.\n\nasync function* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    const response = await clienteAxios.post(\"/api/registro\", user);\n    console.log(response);\n    yield put(registerUserSuccessful(response));\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/store/auth/register/saga.js"],"names":["REGISTER_USER","registerUserSuccessful","registerUserFailed","clienteAxios","takeEvery","fork","put","all","registerUser","payload","user","response","post","console","log","error","watchUserRegister","accountSaga"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,sBAAR,EAAgCC,kBAAhC,QAAyD,WAAzD;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAwC,oBAAxC,C,CAEA;;AACA,gBAAgBC,YAAhB,CAA6B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA;AAAD;AAAV,CAA7B,EAAgD;AAC/C,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACS,IAAb,CAAkB,eAAlB,EAAmCF,IAAnC,CAAvB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAML,GAAG,CAACL,sBAAsB,CAACU,QAAD,CAAvB,CAAT;AACA,GAJD,CAIE,OAAOI,KAAP,EAAc;AACf,UAAMT,GAAG,CAACJ,kBAAkB,CAACa,KAAD,CAAnB,CAAT;AACA;AACD;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACpC,QAAMZ,SAAS,CAACJ,aAAD,EAAgBQ,YAAhB,CAAf;AACA;;AAED,UAAUS,WAAV,GAAwB;AACvB,QAAMV,GAAG,CAAC,CAACF,IAAI,CAACW,iBAAD,CAAL,CAAD,CAAT;AACA;;AAED,eAAeC,WAAf","sourcesContent":["/* import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from './actionTypes';\r\nimport { registerUserSuccessful, registerUserFailed } from './actions';\r\n\r\n//AUTH related methods\r\nimport { postRegister } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n    try {\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n            const response = yield call(postRegister, '/post-register', user);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n    } catch (error) {\r\n        yield put(registerUserFailed(error));\r\n    }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n    yield takeEvery(REGISTER_USER, registerUser)\r\n}\r\n\r\nfunction* accountSaga() {\r\n    yield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n*/\r\n\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\nimport clienteAxios from \"../../config/axios\";\r\nimport {takeEvery, fork, put, all} from \"redux-saga/effects\";\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nasync function* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\tconst response = await clienteAxios.post(\"/api/registro\", user);\r\n\t\tconsole.log(response);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n"]},"metadata":{},"sourceType":"module"}