{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nlet users = [{\n  id: 1,\n  username: \"Admin\",\n  password: \"123456\",\n  email: \"admin@themesdesign.in\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost(\"/post-register\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-login\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","users","id","username","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,IAAIC,KAAK,GAAG,CACX;AACCC,EAAAA,EAAE,EAAE,CADL;AAECC,EAAAA,QAAQ,EAAE,OAFX;AAGCC,EAAAA,QAAQ,EAAE,QAHX;AAICC,EAAAA,KAAK,EAAE;AAJR,CADW,CAAZ;;AASA,MAAMC,WAAW,GAAG,MAAM;AACzB;AACA,MAAIC,IAAI,GAAG,IAAIP,WAAJ,CAAgBD,KAAhB,CAAX;AAEAQ,EAAAA,IAAI,CAACC,MAAL,CAAY,gBAAZ,EAA8BC,KAA9B,CAAoC,UAAUC,MAAV,EAAkB;AACrD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACAT,IAAAA,KAAK,CAACa,IAAN,CAAWH,IAAX;AAEA,WAAO,IAAII,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CC,MAAAA,UAAU,CAAC,YAAY;AACtBF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAN,CAAD,CAAP;AACA,OAFS,CAAV;AAGA,KAJM,CAAP;AAKA,GATD;AAWAJ,EAAAA,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;AAClD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACA,UAAMS,SAAS,GAAGlB,KAAK,CAACmB,MAAN,CAChBC,GAAD,IAASA,GAAG,CAAChB,KAAJ,KAAcM,IAAI,CAACR,QAAnB,IAA+BkB,GAAG,CAACjB,QAAJ,KAAiBO,IAAI,CAACP,QAD7C,CAAlB;AAIA,WAAO,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CC,MAAAA,UAAU,CAAC,YAAY;AACtB,YAAIC,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC9BH,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMG,SAAS,CAAC,CAAD,CAAf,CAAD,CAAP;AACA,SAFD,MAEO;AACNF,UAAAA,MAAM,CAAC,CACN,GADM,EAEN,+EAFM,CAAD,CAAN;AAIA;AACD,OATS,CAAV;AAUA,KAXM,CAAP;AAYA,GAlBD;AAoBAV,EAAAA,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;AAClD;AAEA,WAAO,IAAIK,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CC,MAAAA,UAAU,CAAC,YAAY;AACtBF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,yCAAN,CAAD,CAAP;AACA,OAFS,CAAV;AAGA,KAJM,CAAP;AAKA,GARD;AASA,CA5CD;;AA8CA,eAAeV,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\n\r\nlet users = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tusername: \"Admin\",\r\n\t\tpassword: \"123456\",\r\n\t\temail: \"admin@themesdesign.in\",\r\n\t},\r\n];\r\n\r\nconst fakeBackend = () => {\r\n\t// This sets the mock adapter on the default instance\r\n\tvar mock = new MockAdapter(axios);\r\n\r\n\tmock.onPost(\"/post-register\").reply(function (config) {\r\n\t\tconst user = JSON.parse(config[\"data\"]);\r\n\t\tusers.push(user);\r\n\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tresolve([200, user]);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tmock.onPost(\"/post-login\").reply(function (config) {\r\n\t\tconst user = JSON.parse(config[\"data\"]);\r\n\t\tconst validUser = users.filter(\r\n\t\t\t(usr) => usr.email === user.username && usr.password === user.password\r\n\t\t);\r\n\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tif (validUser[\"length\"] === 1) {\r\n\t\t\t\t\tresolve([200, validUser[0]]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject([\r\n\t\t\t\t\t\t400,\r\n\t\t\t\t\t\t\"Username and password are invalid. Please enter correct username and password\",\r\n\t\t\t\t\t]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tmock.onPost(\"/forget-pwd\").reply(function (config) {\r\n\t\t// User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tresolve([200, \"Check you mail and reset your password.\"]);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\nexport default fakeBackend;\r\n"]},"metadata":{},"sourceType":"module"}