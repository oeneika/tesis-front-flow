{"ast":null,"code":"/*\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\t\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\n\r\nexport default accountSaga;\r\n*/\nimport { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; //Account Redux states\n\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"; //AUTH related methods\n\nimport { postRegister } from \"../../../helpers/fackBackend_Helper\";\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"; // initialize firebase Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n      yield put(registerUserSuccessful(response));\n    } else {\n      const response = yield call(postRegister, \"/post-register\", user);\n      yield put(registerUserSuccessful(response));\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","postRegister","getFirebaseBackend","fireBaseBackend","registerUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","error","watchUserRegister","accountSaga"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,QAA8C,oBAA9C,C,CAEA;;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,SAAQC,sBAAR,EAAgCC,kBAAhC,QAAyD,WAAzD,C,CAEA;;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,kBAAR,QAAiC,kCAAjC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,YAAV,CAAuB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA;AAAD;AAAV,CAAvB,EAA0C;AACzC,MAAI;AACH,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACrD,YAAMC,QAAQ,GAAG,MAAMb,IAAI,CAC1BM,eAAe,CAACC,YADU,EAE1BE,IAAI,CAACK,KAFqB,EAG1BL,IAAI,CAACM,QAHqB,CAA3B;AAKA,YAAMjB,GAAG,CAACI,sBAAsB,CAACW,QAAD,CAAvB,CAAT;AACA,KAPD,MAOO;AACN,YAAMA,QAAQ,GAAG,MAAMb,IAAI,CAACI,YAAD,EAAe,gBAAf,EAAiCK,IAAjC,CAA3B;AACA,YAAMX,GAAG,CAACI,sBAAsB,CAACW,QAAD,CAAvB,CAAT;AACA;AACD,GAZD,CAYE,OAAOG,KAAP,EAAc;AACf,UAAMlB,GAAG,CAACK,kBAAkB,CAACa,KAAD,CAAnB,CAAT;AACA;AACD;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACpC,QAAMrB,SAAS,CAACK,aAAD,EAAgBM,YAAhB,CAAf;AACA;;AAED,UAAUW,WAAV,GAAwB;AACvB,QAAMnB,GAAG,CAAC,CAACF,IAAI,CAACoB,iBAAD,CAAL,CAAD,CAAT;AACA;;AAED,eAAeC,WAAf","sourcesContent":["/*\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\t\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\n\r\nexport default accountSaga;\r\n*/\r\n\r\nimport {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\tif (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n\t\t\tconst response = yield call(\r\n\t\t\t\tfireBaseBackend.registerUser,\r\n\t\t\t\tuser.email,\r\n\t\t\t\tuser.password\r\n\t\t\t);\r\n\t\t\tyield put(registerUserSuccessful(response));\r\n\t\t} else {\r\n\t\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\t\tyield put(registerUserSuccessful(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n"]},"metadata":{},"sourceType":"module"}