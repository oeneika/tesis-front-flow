{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; //Account Redux states\n\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"; //AUTH related methods\n\nimport { postRegister } from \"../../../helpers/fackBackend_Helper\";\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"; // initialize firebase Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    /*\r\n          if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n              const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n              yield put(registerUserSuccessful(response));\r\n          }\r\n          else{*/\n    const response = yield call(postRegister, \"/post-register\", user);\n    yield put(registerUserSuccessful(response)); //}\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["C:/Users/alexa/Documents/Tesis-front/StarterKit/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","postRegister","getFirebaseBackend","fireBaseBackend","registerUser","payload","user","response","error","watchUserRegister","accountSaga"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,QAA8C,oBAA9C,C,CAEA;;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,SAAQC,sBAAR,EAAgCC,kBAAhC,QAAyD,WAAzD,C,CAEA;;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,kBAAR,QAAiC,kCAAjC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,YAAV,CAAuB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA;AAAD;AAAV,CAAvB,EAA0C;AACzC,MAAI;AACH;;;;;;AAMA,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACI,YAAD,EAAe,gBAAf,EAAiCK,IAAjC,CAA3B;AACA,UAAMX,GAAG,CAACI,sBAAsB,CAACQ,QAAD,CAAvB,CAAT,CARG,CASH;AACA,GAVD,CAUE,OAAOC,KAAP,EAAc;AACf,UAAMb,GAAG,CAACK,kBAAkB,CAACQ,KAAD,CAAnB,CAAT;AACA;AACD;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACpC,QAAMhB,SAAS,CAACK,aAAD,EAAgBM,YAAhB,CAAf;AACA;;AAED,UAAUM,WAAV,GAAwB;AACvB,QAAMd,GAAG,CAAC,CAACF,IAAI,CAACe,iBAAD,CAAL,CAAD,CAAT;AACA;;AAED,eAAeC,WAAf","sourcesContent":["import {takeEvery, fork, put, all, call} from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport {REGISTER_USER} from \"./actionTypes\";\r\nimport {registerUserSuccessful, registerUserFailed} from \"./actions\";\r\n\r\n//AUTH related methods\r\nimport {postRegister} from \"../../../helpers/fackBackend_Helper\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase_helper\";\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({payload: {user}}) {\r\n\ttry {\r\n\t\t/*\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{*/\r\n\t\tconst response = yield call(postRegister, \"/post-register\", user);\r\n\t\tyield put(registerUserSuccessful(response));\r\n\t\t//}\r\n\t} catch (error) {\r\n\t\tyield put(registerUserFailed(error));\r\n\t}\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n\tyield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n\tyield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n"]},"metadata":{},"sourceType":"module"}